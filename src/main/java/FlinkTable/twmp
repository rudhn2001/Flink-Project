// FOR FLINK TABLE QUERY
import org.apache.flink.table.api.Table;
import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;
import org.apache.flink.types.Row;
import org.apache.flink.table.expressions.Expression;
import org.apache.flink.table.api.Expressions;

        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);

        //        // Create expressions for the field names
        //        Expression idExpression = Expressions.$("id");
                Expression dataExpression = Expressions.$("data");
        //
        //        TableSchema schema = TableSchema.builder()
        //                .field("id", DataTypes.STRING())
        //                .field("Data", DataTypes.STRING())
        //                .build();
                Table dataTable = tableEnv.fromDataStream(userDataStream, Expressions.$("value"));
                tableEnv.createTemporaryView("userdata", dataTable);




                System.out.println("Constructed SQL Query: " + queryBuilder.toString());



                Table filteredTable = tableEnv.sqlQuery(queryBuilder.toString());
                DataStream<String> filteredDataStream = tableEnv.toRetractStream(filteredTable, Row.class)
                .filter(row -> row.f0)
                .map(row -> row.f1.toString());
